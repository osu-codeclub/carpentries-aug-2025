---
title: "R's data structures and data types"
author: "Software Carpentry / Jelmer Poelstra"
date: 2025-08-18
editor_options: 
  chunk_output_type: console
---

-----

<br>

## Introduction

### What we'll cover

In this session, you will learn about some of the nuts and bolts of R,
giving you a solid foundation to start doing more exciting things in the last
two sessions of the workshop after this: data wrangling and data visualization.

Specifically, we will cover R's **data structures** and **data types**.

- **Data structures** are the kinds of objects that R can store data in.
  Here, we'll see the two most common ones: _vectors_ and _data frames_.

- **Data types** are how R distinguishes between different kinds of data
  like numbers versus character strings.
  Here, we'll talk about the 4 main data types:
  `character`, `integer`, `double`, and `logical.`

An analogy: If we were talking about handling food rather than data,
you can think of different data types as different food items,
and various data structures as the types of containers that contain them.

### Setting up

To make it easier to keep track of what we do,
we'll write our code in a script (and send it to the console from there):

1. _Open a new R script_ (Click the **`+`** symbol in toolbar at the top, then click `R Script`)^[
   Or Click `File` => `New file` => `R Script`.].
   
2. _Save the script_ straight away as `data-structures.R`.
   You can save it anywhere you like, though it is probably best to save it in a
   folder specifically for this workshop.
   
3. If you want section headers as comments in your script,
   like in the script I am showing you in the live session,
   then copy-and-paste the following into your script:

<details><summary>Section headers for your script _(Click to expand)_</summary>
```{r}
# 2 - Vectors ------------------------------------------------------------------
# 2.1 - Single-element vectors and quoting

# 2.2 - Multi-element vectors

# 2.3 - Vectorization

# Challenge 1
# - Start by making a vector x with the whole numbers 1 through 26.
#   Then, subtract 0.5 from each element in the vector and save the result in vector y.
#   Check your results by printing both vectors.

# - What do you think the result of the following operation will be?
#   1:5 * 1:5
#   We didn't cover this kind of scenario, but go ahead and test your intuition!
#   After you've decided on your expectation, run the code and check if you were correct.

# 2.4 - Exploring vectors

# 2.5 - Extracting element from vectors

# 3 - Data frames --------------------------------------------------------------
# 3.1 - Data frame intro

# 4 - Data types ---------------------------------------------------------------
# 4.1 - R's main data types

# 4.3 - A vector can only contain one data type

# Challenge 2
# What type of vector (if any) do you think each of the following will produce?
# Try it out and see if you were right.
#   typeof("TRUE")
#   typeof(banana)
#   typeof(c(2, 6, "3"))
# Bonus / trick question:
#   typeof(18, 3)

# 4.4 - Automatic type coercion
# 4.5 - Manual type conversion

```
</details>

## Data structure 1: Vectors

The first data structure we will explore is the simplest: the vector.
A vector in R is essentially **a collection of one or more items**.
Moving forward, we'll call such individual items "elements".

### Single-element vectors and quoting

Vectors can consist of just a single element,
so each of the two lines of code below creates a vector:

```{r}
vector1 <- 8
vector2 <- "panda"
```

In the `"panda"` example, which is a **character string** (_string_ for short):

- `"panda"` constitutes _one element_, not 5 (its number of letters).
- Unlike when dealing with numbers, we have to _quote the string_.^[
  Either double quotes (`"..."`) or single quotes (`'...'`) work,
  but the former are most commonly used by convention.]

Character strings need to be quoted because they are otherwise interpreted as
R objects -- for example, because our vectors `vector1` and `vector2` are objects,
we refer to them without quotes:

```{r}
# [Note that R will show auto-complete options after you type 3 characters]
vector1
vector2
```

Meanwhile, the code below doesn't work because there is no _object called `panda`_:

```{r, error=TRUE}
vector_fail <- panda
```

### Multi-element vectors

A common way to make vectors with **multiple elements** is
by using the `c` (combine) function:

```{r}
c(2, 6, 3)
```

::: {.callout-note appearance='minimal'}
_Unlike in the first couple of vector examples,_
_we didn't save the above vector to an object:_
_now the vector simply printed to the console -- but it is created all the same._
:::

`c()` can also **append** elements to an existing vector:

```{r}
# First we create a vector:
vector_to_append <- c("cardinal", "chickadee")
vector_to_append

# Then we append another element to it:
c(vector_to_append, "bald eagle")
```

To create vectors with **series of numbers**, a couple of shortcuts are available.
First, you can make series of whole numbers (integers) with the `:` operator:

```{r}
1:10
```

Second, you can use a function like `seq()` and its arguments `from` (starting 
value), `to` (end value), and `by` (step size) for fine control over the sequence: 

```{r}
myseq <- seq(from = 6, to = 8, by = 0.2)
myseq
```

### Vectorization

Consider the output of this command:

```{r}
myseq * 2
```

Above, **every individual element in `myseq` was multiplied by 2**.
We call this behavior "vectorization" and this is a key feature of the R language.
(Alternatively, you may have expected this code to _repeat_ `myseq` twice,
but this did not happen!)

<hr style="height:1pt; visibility:hidden;" />

::: exercise
#### {{< fa user-edit >}} **Challenge 1** {-}

Start by making a vector `x` with the whole numbers 1 through 26.
Then, subtract 0.5 from each element in the vector and save the result in vector `y`.
Check your results by printing both vectors.

<details><summary>Click for the solution</summary>

```{r}
x <- 1:26
x

y <- x - 0.5
y
```

</details>

<hr style="height:1pt; visibility:hidden;" />

-----

What do you think the result of the following operation will be?
We didn't cover this kind of scenario, but go ahead and test your intuition!
After you've decided on your expectation, run the code and check if you were correct.

```{r, eval=FALSE}
1:5 * 1:5
```

<details><summary>Click for the solution</summary>

```{r}
1:5 * 1:5
```

Both vectors are of length 5 which will lead to "element-wise matching":
the first element in the first vector will be multiplied with the first element
in the second vector,
the second element in the first vector will be multiplied with the second element
in the second vector, and so on.

</details>
:::

### Exploring vectors

R has many functions to get information about vectors and other types of objects,
such as:

- Get the **number of elements** with `length()`:

  ```{r}
  length(myseq)
  ```

- See the **first and last few elements**, respectively, with `head()` and `tail()`:

  ```{r}
  # Print the first 6 elements:
  head(myseq)
  
  # Print the last 6 elements:
  tail(myseq)
  
  # Both head and tail have argument `n` to specify the number of elements:
  head(myseq, n = 2)
  ```

- Get **arithmetic summaries** like `sum()` and `mean()` for vectors with numbers:

  ```{r}
  # sum() will sum the values of all elements
  sum(myseq)
  
  # mean() will compute the mean (average) across all elements
  mean(myseq)
  ```

### Extracting elements from vectors

Extracting element from objects like vectors is often referred to as **"indexing"**.
In R, we can do this using bracket notation -- for example:

- Get the second element:

  ```{r}
  myseq[2]
  ```

- Get the second through the fifth elements:

  ```{r}
  myseq[2:5]
  ```

- Get the first and eight elements:

  ```{r}
  myseq[c(1, 8)]
  ```

To put this in a general way:
we can extract elements from a vector by using another vector,
whose values are the positional indices of the elements in the original vector.

## Data structure 2: Data frames

### R stores tabular data in "data frames"

One of R's most powerful features is its **built-in ability to deal with tabular data** --
i.e., data with rows and columns like you are familiar with from spreadsheets
like those you create with Excel.

In R, tabular data is stored in objects that are called "**data frames**",
the second R data structure we'll cover in some depth.
Let's start by making a toy data frame with information about 3 cats:

```{r}
cats <- data.frame(
  name = c("Luna", "Thomas", "Daisy"),
  coat = c("calico", "black", "tabby"),
  weight = c(2.1, 5.0, 3.2)
  )
```

```{r}
cats
```

Above:

- We created 3 vectors and pasted them side-by-side to create a data frame
  in which _each vector constitutes a column_.
- We gave each vector a name (e.g., `coat`), and those names became the _column names_.
- The resulting data frame has 3 rows (one for each cat) and 3 columns
  (each with a type of info about the cats, like coat color).

It is good practice to organize tabular data in the so-called
["tidy" data format](https://r4ds.hadley.nz/data-tidy.html)
like above, where:

- Each column contains a different **"variable"** (e.g. coat color, weight)
- Each row contains a different **"observation"** (data on e.g. one cat/person/sample)

That's all we'll say about data frames for now,
but in today's remaining sessions we will explore this key R data structure more!

## Data types

### R's main Data Types

R distinguishes between different kinds of data, such as character strings and numbers,
in a formal way, using several pre-defined "data types".
The behavior of R in various operations will depend heavily on the data type --
for example, the below fails:

```{r, error=TRUE}
"valerion" * 5
```

We can ask what type of data something is in R using the `typeof()` function:

```{r}
typeof("valerion")
```

R sets the data type of `"valerion"` to `character`,
which we commonly refer to as character strings or strings.
In formal terms, the earlier failed command did not work because R does not allow
us to perform mathematical functions on vectors of type `character`.

The `character` data type most commonly contains letters,
but anything that is placed between quotes (`"..."`) will be interpreted as this
data type -- even plain numbers:

```{r}
typeof("5")
```

<hr style="height:1pt; visibility:hidden;" />

Besides `character`, the other 3 **common data types** are:

- `double` / `numeric` -- numbers that can have decimal points:

  ```{r}
  typeof(3.14)
  ```

- `integer` -- whole numbers only:

  ```{r}
  typeof(1:3)
  ```

- `logical` (either `TRUE` or `FALSE` -- unquoted!):

  ```{r}
  typeof(TRUE)
  ```

### A vector can only contain one data type 

Individual vectors, and therefore also individual columns in data frames,
can only **be composed of a single data type**.

R will silently pick the "best-fitting" data type when you enter or read data into
a data frame.
When we created the `cats` dataframe, this also happened.
The `str` (structure) function prints some information about objects
like data frames, and we can use it to see what the data types are in `cats`:

```{r}
str(cats)
```

- The `name` and `coat` columns are `character`, abbreviated `chr`.
- The `weight` column is `double`/`numeric`, abbreviated `num`.

::: exercise
#### {{< fa user-edit >}} **Challenge 2** {-}

What type of vector (if any) do you think each of the following will produce?
Try it out and see if you were right.

```{r, eval=FALSE}
typeof("TRUE")
typeof(banana)
typeof(c(2, 6, "3"))
```

Bonus / trick question:

```{r, eval=FALSE}
typeof(18, 3)
```

<details><summary>Click for the solutions</summary>

1. `"TRUE"` is `character` (and not `logical`) because of the quotes around it:

   ```{r}
   typeof("TRUE")
   ```

-----

2. Recall the earlier example:
   this returns an error because the object `banana` does not exist.
   Any unquoted string (that is not a special keyword like `TRUE` and `FALSE`)
   is interpreted as a reference to an object in R.
   
   ```{r, error=TRUE}
   typeof(banana)
   ```

-----

3. This produces a `character` vector, and we'll talk about why in the next section:
   
   ```{r}
   typeof(c(2, 6, "3"))
   ```

-------

4. This produces an error because the `typeof()` only accepts a single argument,
   which is an R object like a vector.
   Because we did not wrap use `c()` as in `c(18, 3)`,
   we ended up passing **two** arguments to the function,
   which resulted in an error.
   
   If you thought it would have TWICE returned `integer` (or `double`),
   you were on the right track:
   you couldn't have known the function doesn't accept multiple arguments.
   
   ```{r, error=TRUE}
   typeof(18, 3)
   ```

</details>
:::

### Automatic Type Coercion

R's behavior of returning a character vector for `c(2, 6, "3")` in the challenge
above is called **type coercion**.

When R encounters a _mix of types_ (here, numbers and characters)
to be combined into a single vector, it will force all of them to be the same type.
It "must" do this because, as pointed out above,
a vector can consist of only a single data type.

Type coercion can be the source of many surprises,
and is one reason you need to be aware of the basic R data types and how R will
interpret them.

### Manual Type Conversion

Luckily, you are not just at the mercy of whatever R decides to do automatically,
but can convert vectors using the `as.` group of functions:

:::callout-tip
### Try to use RStudio's auto-complete functionality here: type "`as.`" and then press the <kbd>Tab</kbd> key.
:::

```{r}
as.integer(c("0", "2"))

as.character(c(0, 2))
```

As you may have guessed, though, not all type conversions are possible ---
for example:

```{r}
as.double("kiwi")
```

(`NA` is R's way of denoting _missing data_ --
see [this bonus section](#missing-values-na) for more.)

That's it!
In the next session, we'll learn to manipulate and summarize data frames using
a real dataset with periodic countrywise statistics such as population size.

<br>

------

## Bonus material for self-study

### Changing vector elements using indexing

Above, we saw how you can _extract_ elements of a vector using indexing.
To _change_ elements in a vector,
simply use the bracket on the other side of the arrow -- for example:

- Change the first element to `30`:

  ```{r}
  myseq[1] <- 30
  myseq
  ```

- Change the last element to `0`:

  ```{r}
  myseq[length(myseq)] <- 0
  myseq
  ```
  
- Change the second element to the mean value of the vector:

  ```{r}
  myseq[2] <- mean(myseq)
  myseq
  ```
  
### Extracting columns from a data frame

You can extract individual columns from a data frame using the `$` operator:

```{r}
cats$weight
cats$coat
```

This kind of operation will return a vector -- and can be indexed as well:

```{r}
cats$weight[2]
```

### Factors

**Categorical** data, like treatments in an experiment,
can be stored as "factors" in R.
Factors are useful for statistical analyses and for plotting,
e.g. because they allow you to specify a custom order.

```{r}
diet_vec <- c("high", "medium", "low", "low", "medium")
diet_vec
factor(diet_vec)
```

In the example above, we turned a character vector into a factor.
Its "levels" (low, medium, high) are sorted alphabetically by default,
but we can manually specify an order that makes more sense:

```{r}
diet_fct <- factor(diet_vec, levels = c("low", "medium", "high"))
diet_fct
```

This ordering would be automatically respected in plots and statistical analyses.

::: {.callout-warning collapse='true'}
### Oddly, factors are technically not a data type _(Click to expand)_
For most intents and purposes,
it makes sense to think of factors as another data type, even though technically,
they are a kind of data structure build on the `integer` data type:

```{r}
typeof(diet_fct)
```
:::

### More on the `logical` data type

Add a column to your `cats` data frame that indicates whether each cat does
or does not like string:

```{r}
cats$likes_string <- c(1, 0, 1)
cats
```

So, `likes_string` is numeric,
but the `1`s and `0`s actually represent `TRUE` and `FALSE`.

You could instead use the `logical` data type here,
by converting this column with the `as.logical()` function.
That will turn 0's into `FALSE` and everything else, including 1, to `TRUE`:

```{r}
as.logical(cats$likes_string)
```

To actually modify this column in the dataframe itself:

```{r}
cats$likes_string <- as.logical(cats$likes_string)
cats
```

You might think that `1`/`0` could be a handier coding than `TRUE`/`FALSE`
because that enables easy counting of the number of times something is true or false.
But consider the following R behavior:

```{r}
TRUE + TRUE
```

So, logicals can be used as if they were numbers,
where `FALSE` represents 0 and `TRUE` represents 1.

### Missing values (`NA`)

R has a concept of **missing data**, which is important in statistical computing,
as not all information/measurements are always available for each sample.

In R, missing values are coded as `NA`
(like `TRUE`/`FALSE`, this is not a character string so it is not quoted):

```{r}
# This vector will contain one missing value
vector_NA <- c(1, 3, NA, 7)
vector_NA
```

Notably, many functions operating on vectors will return `NA` if **any** element
in the vector is `NA`:

```{r}
sum(vector_NA)
```

You can get around this is by setting `na.rm = TRUE` in such functions,
for example:

```{r}
sum(vector_NA, na.rm = TRUE)
```

### Learn more

To learn more about data types and data structures, see
[this episode from a separate Carpentries lesson](https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures.html).

<hr style="height:1pt; visibility:hidden;" />

::: exercise
#### {{< fa user-edit >}} **Bonus Challenge** {-}

An important part of every data analysis is cleaning input data.
Here, you will clean a cat data set that has an added observation with a
problematic data entry.

Start by creating the new data frame:

```{r}
cats_v2 <- data.frame(
  name = c("Luna", "Thomas", "Daisy", "Oliver"),
  coat = c("calico", "black", "tabby", "tabby"),
  weight = c(2.1, 5.0, 3.2, "2.3 or 2.4")
)
```

Then move on to the tasks below,
filling in the blanks (`_____`) and running the code:

```{r, eval=FALSE}
# 1. Explore the data frame,
#    including with an overview that shows the columns' data types:
cats_v2
_____(cats_v2)

# 2. The "weight" column has the incorrect data type _____.
#    The correct data type is: _____.

# 3. Correct the 4th weight with the mean of the two given values,
#    then print the data frame to see the effect:
cats_v2$weight[4] <- 2.35
cats_v2

# 4. Convert the weight column to the right data type:
cats_v2$weight <- _____(cats_v2$weight)

# 5. Calculate the mean weight of the cats:
_____
```

<details><summary>Click for the solution</summary>

```{r}
# 1. Explore the data frame,
#    including with an overview that shows the columns' data types:
cats_v2
str(cats_v2)

# 2. The "weight" column has the incorrect data type CHARACTER.
#    The correct data type is: DOUBLE/NUMERIC.

# 3. Correct the 4th weight data point with the mean of the two given values,
#    then print the data frame to see the effect:
cats_v2$weight[4] <- 2.35
cats_v2

# 4. Convert the weight column to the right data type:
cats_v2$weight <- as.double(cats_v2$weight)

# 5. Calculate the mean weight of the cats:
mean(cats_v2$weight)
```

</details>
:::
